/*
* Circle.java
* Author: William Blake Wortham
* Submission Date: 7/12/2017
*
* Purpose: This is a file which creates a new Circle class to be used with another program. It creates 
* various methods such as setX, setY, and setRadius which allow a user to input numbers which are then
* used to fill the variables of a circle. These numbers can be changed with these same methods. Other
* methods in the class will find area, diameter, and perimeter. Fianlly, some methods are contained 
* which can be used to compare to Circles to check if they are equal or concentric and tell the distance
* between them.
*
* Statement of Academic Honesty:
*
* The following code represents my own work. I have neither
* received nor given inappropriate assistance. I have not copied
* or modified code from any source other than the course webpage
* or the course textbook. I recognize that any unauthorized
* assistance or plagiarism will be handled in accordance with
* the University of Georgia's Academic Honesty Policy and the
* policies of this course. I recognize that my work is based
* on an assignment created by the Department of Computer
* Science at the University of Georgia. Any publishing
* or posting of source code for this project is strictly
* prohibited unless you have written consent from the Department
* of Computer Science at the University of Georgia.
*/

//*******************************************************
// Circle.java
//
// 
//*******************************************************
public class Circle {
	

	private double radius;      // declare the private double instance  radius
	private double x;      		// declare the private double instance  x
	private double y;       	// declare the private double instance  y
	
	
	//----------------------------------------------
	// getX - returns the value of x
	//----------------------------------------------
	public double getX() {
		
		return x;// Your code goes here	
	}
	

	//----------------------------------------------
	// getY - returns the value of y
	//----------------------------------------------
	public double getY() {
		
		return y;// Your code goes here	
	}
	
	//----------------------------------------------
	// getRadius - returns the value of radius
	//----------------------------------------------
	public double getRadius() {
		
		return radius;// Your code goes here	
	}

	//----------------------------------------------
	// setX - assigns a new value to x
	//----------------------------------------------
	public void setX(double newX) {
		
		x = newX;// Your code goes here	
	}
	

	//----------------------------------------------
	// setY - assigns a new value to y
	//----------------------------------------------
	public void setY(double newY) {
		
		y = newY;// Your code goes here	
	}	
	
	
	//----------------------------------------------
	// setRadius - assigns a new value to radius
	//----------------------------------------------
	public void setRadius(double newRadius) {
		if (newRadius < 0)
		{
			radius = radius;
		}
		else
		{
			radius = newRadius;
		}// Your code goes here	
	}
	
	//--------------------------------------------------------
	// diameter - calculates the diameter of the circle
	//--------------------------------------------------------
	public double diameter() {
		
		double diameter = 2 * radius;
		return diameter;// Your code goes here	
	}
	

	//--------------------------------------------------------
	// area - returns the area of the circle
	//--------------------------------------------------------
	public double area() {
		
		double area = Math.PI * (radius * radius);
		return area;// Your code goes here	
	}

	//--------------------------------------------------------
	// perimeter - returns the perimeter of the circle
	//--------------------------------------------------------
	public double perimeter() {
		
		double perimeter = 2 * Math.PI * radius;
		return perimeter;// Your code goes here	
	}
	
	//--------------------------------------------------------
	// isUnitCircle - return true if the radius of this circle
	//                is 1 and its center is (0,0) and false
	//      	      otherwise.
	//--------------------------------------------------------
	public boolean isUnitCircle() {
		
		boolean isUnitCircle;
		if (this.getX() == 0 && this.getY() == 0 && this.getRadius() == 1)
		{
			isUnitCircle = true;// Your code goes here	
		}
		else
		{
			isUnitCircle = false;
		}
		return isUnitCircle;
	}
	
	
	//--------------------------------------------------------
	// toString - return a String representation of
	//            this circle in the following format:
	//            center:(x,y)
	//            radius: r
	//--------------------------------------------------------
	public String toString() {
		
		String toString = ("center:(" + this.getX() + "," + this.getY() + ")"
		+ "\nradius: " + this.getRadius());
		return toString;// Your code goes here	
	}
	
	public boolean equals(Circle anotherCircle)
	{
		boolean equals;
		if (this.getX() == anotherCircle.getX() && this.getY() == anotherCircle.getY()
			&& this.getRadius() == anotherCircle.getRadius())
		{
			equals = true;
		}
		else
		{
			equals = false;
		}
		return equals;
	}
	
	public boolean isConcentric(Circle anotherCircle)
	{
		boolean isConcentric;
		if (this.getX() == anotherCircle.getX() && this.getY() == anotherCircle.getY()
			&& this.getRadius() != anotherCircle.getRadius())
		{
			isConcentric = true;
		}
		else
		{
			isConcentric = false;
		}
		return isConcentric;
	}
	
	public double distance(Circle anotherCircle)
	{
		double distance;
		distance = Math.sqrt((Math.pow((this.getX() - anotherCircle.getX()), 2)) + 
		(Math.pow((this.getY() - anotherCircle.getY()), 2)));
		return distance;
	}
	
	public boolean intersects(Circle anotherCircle)
	{
		boolean intersects;
		if (this.distance(anotherCircle) < this.getRadius() + anotherCircle.getRadius())
		{
			intersects = true;
		}
		else
		{
			intersects = false;
		}
		return intersects;
	}

}