import java.lang.reflect.Method;

//*******************************************************
// RubricCircleTester.java
//
//
//  A client to test the functionality of objects
//  of the class Circle
//
// Note: Circles are printed using the notation (x,y,radius) 
//*******************************************************
public class RubricCircleTester{
     
     
    private static double error = 0.0;  // for some tests, this can be adjusted (in case rounding causes slight differences in output). 
     
    
    public static boolean unitCircleTest()
    {
    	Method setXMethod = null, setYMethod = null, 
    			setRadiusMethod = null, isUnitCircleMethod = null;
    	
    	try {
			setXMethod = Circle.class.getMethod("setX", new Class [] { double.class });
		} catch (NoSuchMethodException e) {
			System.out.println("setX(double) method doesn't exist");
		}
    	
    	try {
			setYMethod = Circle.class.getMethod("setY", new Class [] { double.class });
		} catch (NoSuchMethodException e) {
			System.out.println("setY(double) method doesn't exist");
		}
    	
    	try {
			setRadiusMethod = Circle.class.getMethod("setRadius", new Class [] { double.class });
		} catch (NoSuchMethodException e) {
			System.out.println("setRadius(double) method doesn't exist");
		}
    	
    	try {
			isUnitCircleMethod = Circle.class.getMethod("isUnitCircle", (Class<?> []) null);
		} catch (NoSuchMethodException e) {
			System.out.println("isUnitCircle method doesn't exist");
		}
    	
    	if (setXMethod == null){
    		System.out.println("setX method doesn't exist");
    		return false;
    	}
    	if (setYMethod == null){
    		System.out.println("setY method doesn't exist");
    		return false;
    	}
    	if (setRadiusMethod == null){
    		System.out.println("setRadius method doesn't exist");
    		return false;
    	}
    	if (isUnitCircleMethod == null){
    		System.out.println("isUnitCircle method doesn't exist");
    		return false;
    	}
    	
        Circle circle1= new Circle();  // not a unit circle
        circle1.setX(1);
        circle1.setY(1);
        circle1.setRadius(1);
        Circle circle2= new Circle();  // a unit circle
        circle2.setX(0);
        circle2.setY(0);
        circle2.setRadius(1);
        Circle circle3= new Circle(); // not a unit circle
        circle3.setX(5);
        circle3.setY(6);
        circle3.setRadius(10);
        boolean testA = (false == circle1.isUnitCircle());
        boolean testB = (true == circle2.isUnitCircle());
        boolean testC = (false == circle3.isUnitCircle());
         
         
        System.out.println("Unit Circle Test:");
        System.out.println("\tTest Passed: " + testA + "\t(1,1,1) is a unit circle: " + circle1.isUnitCircle());
        System.out.println("\tTest Passed: " + testB + "\t(0,0,1) is a unit circle: " + circle2.isUnitCircle());
        System.out.println("\tTest Passed: " + testC + "\t(5,6,10) is a unit circle: " + circle3.isUnitCircle());
                 
        return testA && testB && testC;
    }
 
     
    public static boolean xTest()
    {
        double x;       
        double xReturn;
        Circle circle= new Circle();
        circle.setX(20);
        circle.setY(1.0);
        circle.setRadius(1.0);
        System.out.println("Getting/Setting x:");
         
        x = 1.0;
        circle.setX(x);
        xReturn =  circle.getX();
        boolean testA =   (x == xReturn);
        System.out.println("\tTest Passed: " + testA + "\tvalue set: " + x + " x returned: " + xReturn);
         
 
        x = -1.0;
        circle.setX(x);
        xReturn =  circle.getX();
        boolean testB =   (x == xReturn);
        System.out.println("\tTest Passed: " + testB + "\tvalue set: " + x + " x returned: " + xReturn);
 
         
        x = 0.0;
        circle.setX(x);
        xReturn =  circle.getX();
        boolean testC =   (x == xReturn);
        System.out.println("\tTest Passed: " + testC + "\tvalue set: " + x + " x returned: " + xReturn);
 
 
        x = 1138.25;
        circle.setX(x);
        xReturn =  circle.getX();
        boolean testD =   (x == xReturn);
        System.out.println("\tTest Passed: " + testD + "\tvalue set: " + x + " x returned: " + xReturn);
 
        return testA && testB && testC && testD;
    }
     
 
    public static boolean yTest()
    {
        double y;       
        double yReturn;
        Circle circle= new Circle();
        circle.setX(20);
        circle.setY(1.0);
        circle.setRadius(1.0);
        System.out.println("Getting/Setting y:");
         
        y = 1.0;
        circle.setY(y);
        yReturn =  circle.getY();
        boolean testA =   (y == yReturn);
        System.out.println("\tTest Passed: " + testA + "\tvalue set: " + y + " y returned: " + yReturn);
         
 
        y = -1.0;
        circle.setY(y);
        yReturn =  circle.getY();
        boolean testB =   (y == yReturn);
        System.out.println("\tTest Passed: " + testB + "\tvalue set: " + y + " y returned: " + yReturn);
         
        y = 0.0;
        circle.setY(y);
        yReturn =  circle.getY();
        boolean testC =   (y == yReturn);
        System.out.println("\tTest Passed: " + testC + "\tvalue set: " + y + " y set returned: " + yReturn);
 
 
        y = 1000.80;
        circle.setY(y);
        yReturn =  circle.getY();
        boolean testD =   (y == yReturn);
        System.out.println("\tTest Passed: " + testD + "\tvalue set: " + y + " y returned: " + yReturn);
 
 
        return testA && testB && testC && testD;
    }
         
 
    public static boolean radiusTest()
    {
        double radius;      
        double radiusReturn;
        Circle circle= new Circle();
        circle.setX(20);
        circle.setY(1.0);
        circle.setRadius(1.0);
        System.out.println("Getting/Setting radius:");
         
        radius = 1.0;
        circle.setRadius(radius);
        radiusReturn =  circle.getRadius();
        boolean testA =   (radius == radiusReturn);
        System.out.println("\tTest Passed: " + testA + "\tvalue set: " + radius + " radius returned: " + radiusReturn);
         
 
        radius = -1.0;
        circle.setRadius(radius);
        radiusReturn =  circle.getRadius();
        boolean testB =   (radius != radiusReturn);
        System.out.println("\tTest Passed: " + testB + "\tvalue set: " + radius + " radius returned: " + radiusReturn);
 
         
        radius = 0.0;
        circle.setRadius(radius);
        radiusReturn =  circle.getRadius();
        boolean testC =   (radius == radiusReturn);
        System.out.println("\tTest Passed: " + testC + "\tvalue set: " + radius + " radius returned: " + radiusReturn);
 
 
        radius = 99.50;
        circle.setRadius(radius);
        radiusReturn =  circle.getRadius();
        boolean testD =   (radius == radiusReturn);
        System.out.println("\tTest Passed: " + testD + "\tvalue set: " + radius + " radius returned: " + radiusReturn);
 
        return testA && testB && testC && testD;
    }
     
     
     
    public static double distance(double x, double y, double  x2, double  y2)
    {
        return Math.sqrt((x - x2)* (x - x2) + (y - y2)* (y - y2));
    }
     
    public static boolean distanceTest()
    {
 
        double x1 = 0.0, y1 = 0.0, r1 = 1.0;
        double x2 = 0.0, y2 = 10.0, r2 = 1.0;
         
        Circle circle1;
        Circle circle2;
                 
        double distance;
        double referenceDistance;
 
         
        System.out.println("Distance Test:");
         
        circle1 = new Circle();
        circle1.setX(x1);
        circle1.setY(y1);
        circle1.setRadius(r1);
        circle2 = new Circle();
        circle2.setX(x2);
        circle2.setY(y2);
        circle2.setRadius(r2);
        distance = circle1.distance(circle2);
        referenceDistance = distance(x1,y1,x2,y2);
        boolean testA = (Math.abs(distance-referenceDistance) <= error);
        System.out.println("\tTest Passed: " + testA +"\texpected: " + referenceDistance + " found: " + distance);
         
        x2 = 10;
        circle1 = new Circle();
        circle1.setX(x1);
        circle1.setY(y1);
        circle1.setRadius(r1);
        circle2 = new Circle();
        circle2.setX(x2);
        circle2.setY(y2);
        circle2.setRadius(r2);
        distance = circle1.distance(circle2);
        referenceDistance = distance(x1,y1,x2,y2);
        boolean testB = (Math.abs(distance-referenceDistance) <= error);
        System.out.println("\tTest Passed: " + testB +"\texpected: " + referenceDistance + " found: " + distance);
     
        x2 = 0;
        y2 = 0;
        circle1 = new Circle();
        circle1.setX(x1);
        circle1.setY(y1);
        circle1.setRadius(r1);
        circle2 = new Circle();
        circle2.setX(x2);
        circle2.setY(y2);
        circle2.setRadius(r2);
        distance = circle1.distance(circle2);
        referenceDistance = distance(x1,y1,x2,y2);
        boolean testC = (Math.abs(distance-referenceDistance) <= error);
        System.out.println("\tTest Passed: " + testC +"\texpected: " + referenceDistance + " found: " + distance);
         
        x1 = 20;
        y1 = 20;
        x2 = 25;
        y2 = 32;
        circle1 = new Circle();
        circle1.setX(x1);
        circle1.setY(y1);
        circle1.setRadius(r1);
        circle2 = new Circle();
        circle2.setX(x2);
        circle2.setY(y2);
        circle2.setRadius(r2);
        distance = circle1.distance(circle2);
        referenceDistance = distance(x1,y1,x2,y2);
        boolean testD = (Math.abs(distance-referenceDistance) <= error);
        System.out.println("\tTest Passed: " + testD +"\texpected: " + referenceDistance + " found: " + distance);
                 
        return testA && testB && testC && testD;
    }
     
 
     
    private static double referenceArea(double r)
    {
        return Math.PI * r*r;
    }
     
    public static boolean areaTest()
    {
 
        Circle circle;
                 
        double area;
        double referenceArea;
 
         
        System.out.println("Area Test:");
         
        circle = new Circle();
        circle.setX(0);
        circle.setY(0);
        circle.setRadius(1);
        area = circle.area();
        referenceArea = referenceArea(1);
        boolean testA = (Math.abs(area-referenceArea) <= error);
        System.out.println("\tTest Passed: " + testA +"\texpected: " + referenceArea + " found: " + area);
 
        circle = new Circle();
        circle.setX(0);
        circle.setY(0);
        circle.setRadius(10);
        area = circle.area();
        referenceArea = referenceArea(10);
        boolean testB = (Math.abs(area-referenceArea) <= error);
        System.out.println("\tTest Passed: " + testB +"\texpected: " + referenceArea + " found: " + area);
 
        circle = new Circle();
        circle.setX(0);
        circle.setY(0);
        circle.setRadius(100);
        area = circle.area();
        referenceArea = referenceArea(100);
        boolean testC = (Math.abs(area-referenceArea) <= error);
        System.out.println("\tTest Passed: " + testC +"\texpected: " + referenceArea + " found: " + area);
 
                         
        return testA && testB && testC;
    }
     
     
     
    private static double referencePerimeter(double r)
    {
        return 2*Math.PI * r;
    }
     
    public static boolean perimeterTest()
    {
 
        Circle circle;
                 
        double perimeter;
        double referencePerimeter;
 
         
        System.out.println("Perimeter Test:");
         
        circle = new Circle();
        circle.setX(0);
        circle.setY(0);
        circle.setRadius(0.5);
        perimeter = circle.perimeter();
        referencePerimeter = referencePerimeter(0.5);
        boolean testA = (Math.abs(perimeter-referencePerimeter) <= error);
        System.out.println("\tTest Passed: " + testA +"\texpected: " + referencePerimeter + " found: " + perimeter);
 
        circle = new Circle();
        circle.setX(0);
        circle.setY(0);
        circle.setRadius(0.05);
        perimeter = circle.perimeter();
        referencePerimeter = referencePerimeter(0.05);
        boolean testB = (Math.abs(perimeter-referencePerimeter) <= error);
        System.out.println("\tTest Passed: " + testB +"\texpected: " + referencePerimeter + " found: " + perimeter);
 
        circle = new Circle();
        circle.setX(0);
        circle.setY(0);
        circle.setRadius(0.005);
        perimeter = circle.perimeter();
        referencePerimeter = referencePerimeter(0.005);
        boolean testC = (Math.abs(perimeter-referencePerimeter) <= error);
        System.out.println("\tTest Passed: " + testC +"\texpected: " + referencePerimeter + " found: " + perimeter);
 
                         
        return testA && testB && testC;
    }
     
     
 
    private static double referenceDiameter(double r)
    {
        return 2*r;
    }
     
    public static boolean diameterTest()
    {
 
        Circle circle;
 
        double radius;
        double diameter;
        double referenceDiameter;
 
         
        System.out.println("Diameter Test:");
         
        radius = 1;
        circle = new Circle();
        circle.setX(0);
        circle.setY(0);
        circle.setRadius(radius);
        diameter = circle.diameter();
        referenceDiameter = referenceDiameter(radius);
        boolean testA = (Math.abs(diameter-referenceDiameter) <= error);
        System.out.println("\tTest Passed: " + testA +"\texpected: " + referenceDiameter + " found: " + diameter);
 
        radius = 2;
        circle = new Circle();
        circle.setX(0);
        circle.setY(0);
        circle.setRadius(radius);
        diameter = circle.diameter();
        referenceDiameter = referenceDiameter(radius);
        boolean testB = (Math.abs(diameter-referenceDiameter) <= error);
        System.out.println("\tTest Passed: " + testB +"\texpected: " + referenceDiameter + " found: " + diameter);
 
        radius = 10;
        circle = new Circle();
        circle.setX(0);
        circle.setY(0);
        circle.setRadius(radius);
        diameter = circle.diameter();
        referenceDiameter = referenceDiameter(radius);
        boolean testC = (Math.abs(diameter-referenceDiameter) <= error);
        System.out.println("\tTest Passed: " + testC +"\texpected: " + referenceDiameter + " found: " + diameter);
 
                         
        return testA && testB && testC;
    }
     
     
 
     
    public static boolean intersectsTest()
    {
        Circle circle1= new Circle();
        circle1.setX(0);
        circle1.setY(1);
        circle1.setRadius(1);
        Circle circle2= new Circle();
        circle2.setX(1);
        circle2.setY(0);
        circle2.setRadius(1);
        Circle circle3= new Circle();
        circle3.setX(10);
        circle3.setY(0);
        circle3.setRadius(2);
        Circle circle4= new Circle();
        circle4.setX(10);
        circle4.setY(3);
        circle4.setRadius(4);
                 
        boolean testA = (true == circle1.intersects(circle2));
        boolean testB = (true == circle2.intersects(circle1));
        boolean testC = (false == circle1.intersects(circle3));
        boolean testD = (true == circle3.intersects(circle4));
         
        System.out.println("Intersection Test:");
        System.out.println("\tTest Passed: " + testA + "\t (0,1,1) intersects (1,0,1): " + circle1.intersects(circle2));
        System.out.println("\tTest Passed: " + testB + "\t (1,0,1) intersects (0,1,1): " + circle2.intersects(circle1));
        System.out.println("\tTest Passed: " + testC + "\t (0,1,1) intersects (10,0,2): " + circle1.intersects(circle3));
        System.out.println("\tTest Passed: " + testD + "\t (10,0,2) intersects (10,3,4): " + circle3.intersects(circle4));
 
        return testA && testB && testC && testD;
    }
 
     
 
    public static boolean concentricTest()
    {
        Circle circle1= new Circle();  
        circle1.setX(10);
        circle1.setY(10);
        circle1.setRadius(5);
        Circle circle2= new Circle();
        circle2.setX(10);
        circle2.setY(10);
        circle2.setRadius(3);
        Circle circle3= new Circle();
        circle3.setX(0);
        circle3.setY(0);
        circle3.setRadius(5);
        Circle circle4= new Circle();
        circle4.setX(0);
        circle4.setY(0);
        circle4.setRadius(4);
                 
        boolean testA = (true == circle2.isConcentric(circle1));
        boolean testB = (false == circle2.isConcentric(circle3));
        boolean testC = (false == circle3.isConcentric(circle1));
        boolean testD = (true == circle4.isConcentric(circle3));
         
        System.out.println("Concentric Circles Test:");
        System.out.println("\tTest Passed: " + testA + "\t (10,10,3) concentric with (10,10,5): " + circle2.isConcentric(circle1));
        System.out.println("\tTest Passed: " + testB + "\t (10,10,3) concentric with (0,0,5): " + circle2.isConcentric(circle3));
        System.out.println("\tTest Passed: " + testC + "\t (0,0,5) concentric with (10,10,5): " + circle3.isConcentric(circle1));
        System.out.println("\tTest Passed: " + testD + "\t (0,0,4) concentric with (0,0,5): " + circle4.isConcentric(circle3));
 
        return testA && testB && testC && testD;
    }
 
 
    public static boolean equalsTest()
    {
        Circle circle1= new Circle();  
        circle1.setX(10);
        circle1.setY(10);
        circle1.setRadius(5);
        Circle circle2= new Circle();
        circle2.setX(0);
        circle2.setY(10);
        circle2.setRadius(5);
        Circle circle3= new Circle();
        circle3.setX(0);
        circle3.setY(11);
        circle3.setRadius(5);
        Circle circle4= new Circle();
        circle4.setX(10);
        circle4.setY(10);
        circle4.setRadius(6);
         
                 
        boolean testA = (true == circle1.equals(circle1));
        boolean testB = (false == circle2.equals(circle1));
        boolean testC = (false == circle3.equals(circle2));
        boolean testD = (false == circle4.equals(circle1));
         
         
        System.out.println("Equals Test:");
        System.out.println("\tTest Passed: " + testA + "\t (10,10,5) equals (10,10,5): " + circle1.equals(circle1));
        System.out.println("\tTest Passed: " + testB + "\t (0,10,5)  equals (10,10,5): " + circle2.equals(circle1));
        System.out.println("\tTest Passed: " + testC + "\t (0,11,5)  equals (0,10,5): " +  circle3.equals(circle2));
        System.out.println("\tTest Passed: " + testD + "\t (10,10,6) equals (10,10,5): " + circle4.equals(circle1));
 
        return testA && testB && testC && testD;
    }
 
 
     
     
     
     
     
     
    public static void main(String[] args) {
         boolean flag3, flag4, flag5, flag6, flag7, flag8, flag9, flag10, flag11, flag12, flag13;
         flag3=flag4=flag5=flag6=flag7=flag8=flag9=flag10=flag11=flag12=flag13 = false;
         
    	try{ flag3 = unitCircleTest(); } catch (Exception e){}
    	try{ flag4 = xTest(); } catch (Exception e){}
    	try{ flag5 = yTest(); }catch (Exception e){}
    	try{ flag6 = radiusTest(); }catch (Exception e){}
    	try{ flag7 = distanceTest(); }catch (Exception e){}
    	try{ flag8 = areaTest(); }catch (Exception e){}
    	try{ flag9 = perimeterTest(); }catch (Exception e){}
    	try{ flag10 = diameterTest(); }catch (Exception e){}
    	try{ flag11 = intersectsTest(); }catch (Exception e){}
    	try{ flag12 = concentricTest(); }catch (Exception e){}
    	try{ flag13 = equalsTest(); }catch (Exception e){}
        
        boolean flag = flag3 && flag4 && flag5 && flag6 && flag7 
        	&& flag8 && flag9 && flag10 && flag11 && flag12 && flag13;
        
        System.out.println("\n----------------");
        if (!flag3) System.out.println("-5 unit circle test");
        if (!flag4) System.out.println("-5 y test");
        if (!flag5) System.out.println("-5 x test");
        if (!flag6) System.out.println("-5 radius test");
        if (!flag7) System.out.println("-5 distance test");
        if (!flag8) System.out.println("-5 area test");
        if (!flag9) System.out.println("-5 perimeter test");
        if (!flag10) System.out.println("-5 diameter test");
        if (!flag11) System.out.println("-5 intersection test");
        if (!flag12) System.out.println("-5 concentric test");
        if (!flag13) System.out.println("-5 equals test");
         
        System.out.print("\nAll TESTS PASSED: " + flag); 
         
         
                 
    }
     
}