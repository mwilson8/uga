/*
* Stat.java
* Author: William Blake Wortham
* Submission Date: 7/26/2017
*
* Purpose: This class is an "upgraded" version of the Stat class. It still allows the user to create stat
* objects made of arrays with type Double[]; however, users may input arrays of different types into the 
* constructors such as ints, floats, and longs. These arrays will be converted to doubles and the min, max,
* average, and mode methods will work. This class also includes an append which will add an array onto the
* end of another by creating a new array of their combined sizes. 
*
* Statement of Academic Honesty:
*
* The following code represents my own work. I have neither
* received nor given inappropriate assistance. I have not copied
* or modified code from any source other than the course webpage
* or the course textbook. I recognize that any unauthorized
* assistance or plagiarism will be handled in accordance with
* the University of Georgia's Academic Honesty Policy and the
* policies of this course. I recognize that my work is based
* on an assignment created by the Department of Computer
* Science at the University of Georgia. Any publishing
* or posting of source code for this project is strictly
* prohibited unless you have written consent from the Department
* of Computer Science at the University of Georgia.
*/

public class Stat2 {
	
private double[] data;
	//constructors
	public Stat2()
	{
		data = new double[0];
	}
	
	public Stat2(double[] d)
	{
		if (d == null)
		{
			data = new double[0];
		}
		else
		{
			data = new double[d.length];
			for(int i = 0; i < d.length; i++)
			{
				data[i] = d[i];
			}
		}
	}
	
	public Stat2(int[] i)
	{
		if (i == null)
		{
			data = new double[0];
		}
		else
		{
			data = new double[i.length];
			for(int index = 0; index < i.length; index++)
			{
				data[index] = i[index];
			}
		}
	}
	
	public Stat2(long[] lo)
	{
		if (lo == null)
		{
			data = new double[0];
		}
		else
		{
			data = new double[lo.length];
			for(int i = 0; i < lo.length; i++)
			{
				data[i] = lo[i];
			}
		}
	}
	
	public Stat2(float[] f)
	{
		if (f == null)
		{
			data = new double[0];
		}
		else
		{
			data = new double[f.length];
			for(int i = 0; i < f.length; i++)
			{
				data[i] = f[i];
			}
		}
	}
	//getter
	public double[] getData()
	{
		double[] copy = new double[data.length];
		for(int i = 0; i < data.length; i++)
		{
			copy[i] = data[i];
		}
		return copy;
	}
	//setters (work for different types)
	public void setData(double[] d)
	{
		if (d == null)
		{
			data = new double[0];
		}
		else
		{
			data = new double[d.length];
			for(int i = 0; i < d.length; i++)
			{
				data[i] = d[i];
			}
		}
	}
	
	public void setData(int[] i)
	{
		if (i == null)
		{
			data = new double[0];
		}
		else
		{
			data = new double[i.length];
			for(int index = 0; index < i.length; index++)
			{
				data[index] = i[index];
			}
		}
	}
	
	public void setData(long[] lo)
	{
		if (lo == null)
		{
			data = new double[0];
		}
		else
		{
			data = new double[lo.length];
			for(int i = 0; i < lo.length; i++)
			{
				data[i] = lo[i];
			}
		}
	}
	
	public void setData(float[] f)
	{
		if (f == null)
		{
			data = new double[0];
		}
		else
		{
			data = new double[f.length];
			for(int i = 0; i < f.length; i++)
			{
				data[i] = f[i];
			}
		}
	}
	
	public boolean equals(Stat2 s)
	{
		if (s == null)
		{
			return false;
		}
		else
		{
			boolean check = false;
			if(this.data.length == s.getData().length)
			{
				for(int i = 0; i < data.length; i++)
				{
					if(this.data[i] == s.getData()[i])
					{
						check = true;
					}
					else
					{
						check = false;
					}
				}
			}
			if (check == true)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
	}
	//gives new blank array
	public void reset()
	{
		data = new double[0];
	}
	//"adds" on array to another ... creates a new array which contains the numbers from both
	public void append(double[] d)
	{
		if (d != null)
		{
			double[] combo = new double[data.length+d.length];
			for(int index = 0; index < data.length; index++)
			{
				combo[index] = data[index];
			}
			for(int index = data.length, count = 0; index < data.length+d.length; index++, count++)
			{
				combo[index] = d[count];
			}
			data = combo;
		}
		
	}
	
	public void append(int[] i)
	{
		if (i != null)
		{
			double[] combo = new double[data.length+i.length];
			for(int index = 0; index < data.length; index++)
			{
				combo[index] = data[index];
			}
			for(int index = data.length, count = 0; index < data.length+i.length; index++, count++)
			{
				combo[index] = i[count];
			}
			data = combo;
		}
		
	}
	
	public void append(long[] lo)
	{
		if (lo != null)
		{
			double[] combo = new double[data.length+lo.length];
			for(int index = 0; index < data.length; index++)
			{
				combo[index] = data[index];
			}
			for(int index = data.length, count = 0; index < data.length+lo.length; index++,count++)
			{
				combo[index] = lo[count];
			}
			data = combo;
		}
		
	}
	
	public void append(float[] f)
	{
		if (f != null)
		{
			double[] combo = new double[data.length+f.length];
			for(int index = 0; index < data.length; index++)
			{
				combo[index] = data[index];
			}
			for(int index = data.length, count = 0; index < data.length+f.length; index++,count++)
			{
				combo[index] = f[count];
			}
			data = combo;
		}
		
	}
	//checks to see if array length is 0
	public boolean isEmpty()
	{
		if (data.length == 0)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	public String toString()
	{
		String string = " ";
		for(int i = 0; i < data.length; i++)
		{
			if (i != data.length - 1)
			{
				string = string + data[i] + ", ";
			}
			else if (i == data.length - 1)
			{
				string = string + data[i];
			}
		}
		string = string.substring(1);
		return "[" + string + "]";
	}
	//min, max, average, and mode
	public double min()
	{
		if(this.isEmpty() == true)
		{
			return Double.NaN;
		}
		else
		{
			double min = data[0];
			for(int i = 0; i < data.length; i++)
			{
				min = Math.min(min, data[i]);
			}
			return min;
		}
	}
	
	public double max()
	{
		if(this.isEmpty() == true)
		{
			return Double.NaN;
		}
		else
		{
			double max = data[0];
			for(int i = 0; i < data.length; i++)
			{
				max = Math.max(max, data[i]);
			}
			return max;
		}
	}
	
	public double average()
	{
		if(this.isEmpty() == true)
		{
			return Double.NaN;
		}
		else
		{
			double avg = 0;
			for(int i = 0; i < data.length; i++)
			{
				avg = avg + data[i];
			}
			avg = avg/data.length;
			return avg;
		}
	}
	
	public double mode()
	{
		int count = 0, maxCount = 0;
		double numToCheck, mode = Double.NaN;
		boolean hasMode = true;
		for (int i = 0; i < data.length; i++, count = 0)
		{
			numToCheck =  data[i];
			for (int index = 0; index < data.length; index++)
			{
				if (numToCheck == data[index])
				{
					count++;
				}
				if (count > maxCount)
				{
					maxCount = count;
					mode = numToCheck;
					hasMode = true;
				}
				else if(count == maxCount && numToCheck != mode)
				{
					hasMode = false;
				}
			}
		}
		if(hasMode == true && this.isEmpty() == false)
		{
			return mode;
		}
		else
		{
			return Double.NaN;
		}
	}
	
	public int occursNumberOfTimes(double value)
	{
		int count = 0;
		for (int i = 0; i < data.length; i++)
		{
			if (data[i] == value)
			{
				count++;
			}
		}
		return count;
	}
	
	public double variance()
	{
		if (this.isEmpty() == true)
		{
			return Double.NaN;
		}
		else
		{
			double mean = this.average(), value = 0, variance = 0;
			for (int i = 0; i < data.length; i++)
			{
				value = data[i] - mean;
				value = value*value;
				variance = variance + value;
			}
			variance = variance/data.length;
			return variance;
		}
	}
	
	public double standardDeviation()
	{
		if (this.isEmpty() == true)
		{
			return Double.NaN;
		}
		else
		{
			return Math.sqrt(this.variance());
		}
	}
	//included main method
	public static void main(String[] args)
	{
		
	}
}

