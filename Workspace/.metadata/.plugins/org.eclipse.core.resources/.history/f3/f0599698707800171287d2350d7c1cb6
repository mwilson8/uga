/*
* Stat.java
* Author: William Blake Wortham
* Submission Date: 7/26/2017
*
* Purpose: This class allows the user to create arrays of double values which can then have methods run
* on them to give information about the arrays to the user. Such methods include min, max, average, and
* mode which give the minimum, maximum, average, and mode of the arrays. Another method will allow the 
* user to compare 2 stat objects with equals.
*
* Statement of Academic Honesty:
*
* The following code represents my own work. I have neither
* received nor given inappropriate assistance. I have not copied
* or modified code from any source other than the course webpage
* or the course textbook. I recognize that any unauthorized
* assistance or plagiarism will be handled in accordance with
* the University of Georgia's Academic Honesty Policy and the
* policies of this course. I recognize that my work is based
* on an assignment created by the Department of Computer
* Science at the University of Georgia. Any publishing
* or posting of source code for this project is strictly
* prohibited unless you have written consent from the Department
* of Computer Science at the University of Georgia.
*/

public class Stat {
	
	private double[] data;
	
	//Constructors
	public Stat()
	{
		data = new double[1];
		data[0] = 0.0;
	}
	
	public Stat(double[] d)
	{
		data = new double[d.length];
		for(int i = 0; i < d.length; i++)
		{
			data[i] = d[i];
		}
	}
	//getter
	public double[] getData()
	{
		double[] copy = new double[data.length];
		for(int i = 0; i < data.length; i++)
		{
			copy[i] = data[i];
		}
		return copy;
	}
	//setter
	public void setData(double[] d)
	{
		data = new double[d.length];
		for(int i = 0; i < d.length; i++)
		{
			data[i] = d[i];
		}
	}
	
	public boolean equals(Stat s)
	{
		boolean check = false;
		if(this.data.length == s.getData().length)
		{
			for(int i = 0; i < data.length; i++)
			{
				if(this.data[i] == s.getData()[i])
				{
					check = true;
				}
				else
				{
					check = false;
				}
			}
		}
		if (check == true)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	public String toString()
	{
		String string = " ";
		for(int i = 0; i < data.length; i++)
		{
			if (i != data.length - 1)
			{
				string = string + data[i] + ", ";
			}
			else if (i == data.length - 1)
			{
				string = string + data[i];
			}
		}
		string = string.substring(1);
		return "[" + string + "]";
	}
	//min, max, average, mode
	public double min()
	{
		double min = data[0];
		for(int i = 0; i < data.length; i++)
		{
			min = Math.min(min, data[i]);
		}
		return min;
	}
	
	public double max()
	{
		double max = data[0];
		for(int i = 0; i < data.length; i++)
		{
			max = Math.max(max, data[i]);
		}
		return max;
	}
	
	public double average()
	{
		double avg = 0;
		for(int i = 0; i < data.length; i++)
		{
			avg = avg + data[i];
		}
		avg = avg/data.length;
		return avg;
	}
	
	public double mode()
	{
		int count = 0, maxCount = 0;
		double numToCheck, mode = Double.NaN;
		boolean hasMode = true;
		for (int i = 0; i < data.length; i++, count = 0)
		{
			numToCheck =  data[i];
			for (int index = 0; index < data.length; index++)
			{
				if (numToCheck == data[index])
				{
					count++;
				}
				if (count > maxCount)
				{
					maxCount = count;
					mode = numToCheck;
					hasMode = true;
				}
				else if(count == maxCount && numToCheck != mode)
				{
					hasMode = false;
				}
			}
		}
		if(hasMode == true)
		{
			return mode;
		}
		else
		{
			return Double.NaN;
		}
	}
	//included main method
	public static void main(String[] args)
	{
		
	}
}
